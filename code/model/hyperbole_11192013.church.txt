;;This is a version of the exaggeration model that uses goals to determine how precise the speaker wants to be, and a goal that determines whether the speaker wants to communicate just the valence, just the world state, or both

;; Domain-dependent parameters

;; Define prior of prices (taken from human experiments)
; Kettle priors
;(define (state-prior) (multinomial states '(0.4205 0.3865 0.0533 0.0538 0.0223 0.0211 0.0112 0.0111 0.0083 0.0120)))
; Laptop priors
;(define (state-prior) (multinomial states '(0.0219 0.0213 0.2002 0.1939 0.2149 0.1926 0.0599 0.0536 0.0206 0.0211)))
; Watch priors
(define (state-prior) (multinomial states '(0.2300 0.2425 0.1305 0.1225 0.0784 0.0715 0.0414 0.0417 0.0211 0.0204)))

; Uniform priors
;(define (state-prior) (multinomial states '(0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1)))


;; Conditional probability, for each price state, that it has no valence (i.e. '0) (taken from human experiments)
; Kettle
;(define valence-prior (list (list '50 '0.3173) (list '51 '0.3173) (list '500 '0.7920)  (list '501 '0.7920) (list '1000 '0.8933) (list '1001 '0.8933)(list '5000 0.9524) (list '5001 0.9524) (list '10000 0.9864) (list '10001 0.9864)))
; Laptop
;(define valence-prior (list (list '50 '0.0393) (list '51 '0.0393) (list '500 '0.3779)  (list '501 '0.3779) (list '1000 '0.6281) (list '1001 '0.6281)(list '5000 0.8947) (list '5001 0.8947) (list '10000 0.9655) (list '10001 0.9655)))
; Watch
(define valence-prior (list (list '50 '0.2287) (list '51 '0.2287) (list '500 '0.6900)  (list '501 '0.6900) (list '1000 '0.8324) (list '1001 '0.8324)(list '5000 0.9359) (list '5001 0.9359) (list '10000 0.9911) (list '10001 0.9911)))
; Uniform valence prior
;(define valence-prior (list (list '50 '0.1) (list '51 '0.1) (list '500 '0.1)  (list '501 '0.1) (list '1000 '0.1) (list '1001 '0.1)(list '5000 0.1) (list '5001 0.1) (list '10000 0.1) (list '10001 0.1)))

;; Domain-independent parameters
(define depth 1)
(define hardness 1)

;; Define communicative goals and goal priors
(define goals (list 'state-and-valence-precise 'state-and-valence-imprecise  'just-state-precise 'just-state-imprecise 'just-valence))
(define (goal-prior) (multinomial goals '(0.17 0.17 0.17 0.17 0.32)))

;; Define limited goals and goal priors
;(define goals (list 'just-state-precise 'just-state-imprecise))
;(define (goal-prior) (multinomial goals '(0.5 0.5)))
;(define goals (list 'just-state-precise 'state-and-valence-precise 'just-valence))
;(define (goal-prior) (multinomial goals '(0.33 0.33 0.33)))


;; Define list of prices under consideration (possible price states)
(define states (list '50 '51 '500 '501 '1000 '1001 '5000 '5001 '10000 '10001))

;; Define list of possible utterances (same as price states)
(define utterances states)

;; Approximate cost of utterances as prior probability of utterance
(define (utterance-prior) (multinomial utterances '(0.18 0.1 0.18 0.1 0.18 0.1 0.18 0.1 0.18 0.1)))
; Uniform cost
;(define (utterance-prior) (multinomial utterances '(0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1)))

; High cost difference
;(define (utterance-prior) (multinomial utterances '(0.2 0.1 0.2 0.1 0.2 0.1 0.2 0.1 0.2 0.1)))



;; Define valences. 0 is no valence; 1 is with valence
(define valences (list '0 '1))

(define (sample-valence state prior)
  (let ((current-state-valence-pair (first prior)))
    (if (equal? state (first current-state-valence-pair))
        (if (flip (second current-state-valence-pair))
            '1
            '0)
        (sample-valence state (rest prior)))))


(define (literal-interpretation utterance state)
  (equal? utterance state))

(define (evaluate-state-goal listener-state speaker-state precision)
  (if (equal? precision 'precise)
      (equal? listener-state speaker-state)
      (<= (abs (- listener-state speaker-state)) 1)))

(define (goal-satisfied? goal listener-state-valence-pair speaker-state speaker-valence)
  (case goal
    (('state-and-valence-precise) (and (evaluate-state-goal (first listener-state-valence-pair) speaker-state 'precise)
                               (equal? (second listener-state-valence-pair) speaker-valence)))
    (('state-and-valence-imprecise) (and (evaluate-state-goal (first listener-state-valence-pair) speaker-state 'imprecise)
                               (equal? (second listener-state-valence-pair) speaker-valence)))
    (('just-state-precise) (evaluate-state-goal (first listener-state-valence-pair) speaker-state 'precise))
    (('just-state-imprecise) (evaluate-state-goal (first listener-state-valence-pair) speaker-state 'imprecise))
    (('just-valence) (equal? (second listener-state-valence-pair) speaker-valence))))


;; The model is currently restricted to hardness=1
(define speaker
  (mem (lambda (state valence goal depth)
  (enumeration-query
   (define utterance (utterance-prior))
   utterance
    (goal-satisfied? goal (apply multinomial (listener utterance depth)) state valence)
   ))))

(define listener
  (mem (lambda (utterance depth)
  (enumeration-query
   (define state (state-prior))
   (define valence (sample-valence state valence-prior))
   (define speaker-goal (goal-prior))
   
   (list state valence)

   (if (equal? depth 0)
       (literal-interpretation utterance state)
       (equal? utterance
               (apply multinomial (speaker state valence speaker-goal (- depth 1)))))
   ))))

(define (sample-one utterance) 
  (listener utterance depth))

(list (sample-one '50) (sample-one '51) (sample-one '500) 
      (sample-one '501) (sample-one '1000) (sample-one '1001)
      (sample-one '5000) (sample-one '5001) (sample-one '10000) (sample-one '10001))